<snippet>
	<content><![CDATA[
template<ll p,ll w> // prime, primitive root
struct Field { using T = Field; ll x; Field(ll x=0) : x{x} {}
    T operator+(T r) const { return {(x+r.x)%p}; }
    void operator+=(T r) { x = (x+r.x)%p; }
    T operator-(T r) const { return {(x-r.x+p)%p}; }
    void operator-=(T r) { x = (x-r.x+p)%p; }
    T operator*(T r) const { return {(x*r.x)%p}; }
    void operator*=(T r) { x = (x*r.x)%p; }
    T operator/(T r) const { return (*this)*r.inv(); }
    void operator/=(T r) { x = (x*r.inv())%p; }
    T inv() const { return {power(x,p-2,p)}; }
    static T root(ll k) { assert( (p-1)%k==0 );     // (p-1)%k == 0?
        auto r = power(w,(p-1)/abs(k),p);          // k-th root of unity
        return k>=0 ? T{r} : T{r}.inv();
    }
    bool zero() const { return x == 0LL; }
};
using F = Field<998244353,3 >;

constexpr double pi = 3.1415926535897932384626433; // or std::acos(-1)
struct Complex { using T = Complex; double u,v;
    Complex(double u=0, double v=0) : u{u}, v{v} {}
    T operator+(T r) const { return {u+r.u, v+r.v}; }
    T operator-(T r) const { return {u-r.u, v-r.v}; }
    T operator*(T r) const { return {u*r.u - v*r.v, u*r.v + v*r.u}; }
    T operator/(T r) const {
        auto norm = r.u*r.u+r.v*r.v;
        return {(u*r.u + v*r.v)/norm, (v*r.u - u*r.v)/norm};
    }
    T operator*(double r) const { return T{u*r, v*r}; }
    T operator/(double r) const { return T{u/r, v/r}; }
    T inv() const { return T{1,0}/ *this; }
    T conj() const { return T{u, -v}; }
    static T root(ll k){ return {cos(2*pi/k), sin(2*pi/k)}; }
    bool zero() const { return max(abs(u), abs(v)) < 1e-6; }
};

void brinc(int &x, int k) {
    int i = k - 1, s = 1 << i;
    x ^= s;
    if ((x & s) != s) {
        --i; s >>= 1;
        while (i >= 0 && ((x & s) == s))
            x = x &~ s, --i, s >>= 1;
        if (i >= 0) x |= s;
    }
}
using T = Complex;   // using T=F for Modulo field
vector<T> roots;
// void root_cache(int N) {
//     if (N == (int)roots.size()) return;
//     roots.assign(N, T{0});
//     for (int i = 0; i < N; ++i)
//         roots[i] = ((i&-i) == i)
//             ? T{cos(2.0*pi*i/N), sin(2.0*pi*i/N)}
//             : roots[i&-i] * roots[i-(i&-i)];
// }
void fft(vector<T> &A, int p, bool inv = false) {
    int N = 1<<p;
    for(int i = 0, r = 0; i < N; ++i, brinc(r, p))
        if (i < r) swap(A[i], A[r]);
//  Uncomment to precompute roots (for T=Complex). Slower but more precise.
//  root_cache(N);
//              , sh=p-1        , --sh
    for (int m = 2; m <= N; m <<= 1) {
        T w, w_m = T::root(inv ? -m : m);
        for (int k = 0; k < N; k += m) {
            w = T{1};
            for (int j = 0; j < m/2; ++j) {
//              T w = (!inv ? roots[j<<sh] : roots[j<<sh].conj());
                T t = w * A[k + j + m/2];
                A[k + j + m/2] = A[k + j] - t;
                A[k + j] = A[k + j] + t;
                w = w * w_m;
            }
        }
    }
    if(inv){ T inverse = T(N).inv(); for(auto &x : A) x = x*inverse; }
}
// convolution leaves A and B in frequency domain state
// C may be equal to A or B for in-place convolution
void convolution(vector<T> &A, vector<T> &B, vector<T> &C){
    int s = A.size() + B.size() - 1;
    int q = 32 - __builtin_clz(s-1), N=1<<q;    // fails if s=1
    A.resize(N,{}); B.resize(N,{}); C.resize(N,{});
    fft(A, q, false); fft(B, q, false);
    for (int i = 0; i < N; ++i) C[i] = A[i] * B[i];
    fft(C, q, true); C.resize(s);
}
void square_inplace(vector<T> &A) {
    int s = 2*A.size()-1, q = 32 - __builtin_clz(s-1), N=1<<q;
    A.resize(N,{}); fft(A, q, false);
    for(auto &x : A) x = x*x;
    fft(A, q, true); A.resize(s);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fft</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
