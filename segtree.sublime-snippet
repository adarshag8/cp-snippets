<snippet>
	<content><![CDATA[
struct data
{
    int mn,mx,sum;
    data() : mn(INF), mx(-INF), sum(0) {};
};
 
struct SegTree
{
    int n;
    vector<data> st;
    vector<bool> cLazy;
    vector<int> lazy;
    void init(int a, bool f=1)
    {
        n = a;
       	data temp;
       	temp.mn = 0;
       	temp.sum = 0;
       	temp.mx = 0;
        if(f) st.assign(4 * n + 5, data());
        else st.assign(4*n+5, temp);
        cLazy.assign(4 * n + 5, false);
        lazy.assign(4 * n + 5, 0);
    }
    void merge(data &cur, data &l, data &r) 
    {
        cur.mn = min(l.mn, r.mn);
        cur.mx = max(l.mx, r.mx);
        cur.sum = l.sum + r.sum;
    }
    void pushdown(int node, int L, int R)
    {
        if(L != R)
        {
            cLazy[node*2] = 1;
            cLazy[node*2 + 1] = 1;
            lazy[node*2] += lazy[node];
            lazy[node*2 + 1] += lazy[node]; 
        }
        st[node].mn += lazy[node];
        st[node].mx += lazy[node];
        st[node].sum += (R-L+1)*lazy[node];
        lazy[node] = 0;
        cLazy[node] = 0;
    }
    data Query(int node, int tl, int tr, int i, int j)
    {
        if(cLazy[node])
            pushdown(node, tl, tr);
        if(j<tl || i>tr)
            return data();
        if(i<=tl && tr<=j)
            return st[node];
        int mid = (tl + tr)/2;
        data left=Query(node*2, tl, mid, i, j);
        data right=Query(node*2 + 1, mid + 1, tr, i, j);
        data cur;
        merge(cur, left, right);
        return cur;
    } 
    void Update(int node, int tl, int tr, int i, int j, int val)
    {
    	// trace(node,tl,tr,i,j);
        if(cLazy[node])
            pushdown(node, tl, tr);
        if(j<tl || i>tr)
            return;
        if(i<=tl && tr<=j)
        {
            cLazy[node] = 1;
            lazy[node] = val;
            pushdown(node,tl,tr);
            return;
        }
        int mid = (tl + tr)/2;
        Update(node*2, tl, mid, i, j, val);
        Update(node*2 + 1, mid + 1, tr, i, j, val);
        merge(st[node], st[node*2], st[node*2 + 1]);
    }
    int get_first(int node, int tl, int tr, int val){
    	if(st[node].mn>val) return -1;
    	int mid = (tl+tr)/2;
    	if(st[2*node].mn<=val) return get_first(2*node, tl, mid, val);
    	else return get_first(2*node+1, mid+1, tr, val);
    }
    data query(int pos)
    {
        return Query(1, 0, n, pos, pos);
    }
    data query(int l, int r)
    {
        return Query(1, 0, n, l, r);
    }
    void update(int pos, int val)
    {
        Update(1, 0, n, pos, pos, val);
    }
    void update(int l, int r, int val)
    {
        Update(1, 0, n, l, r, val);
    }
};
/*
Some points to keep in mind:
1. For building segtree using array make individual point updates
2. For initial zeroes use st.init(N,0)
3. For range assignment change all += to =
*/
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>segtree</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
