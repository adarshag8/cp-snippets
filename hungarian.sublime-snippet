<snippet>
	<content><![CDATA[
int a[N][N]; // Costs of edges in bipartite graph
vector<int> u (N), v (N), p (N), way (N);
int n; // Size of first partition
int m; // Size of second partition
vector<int> hungarian(){
	for (int i=1; i<=n; ++i) {
		p[0] = i;
		int j0 = 0;
		vector<int> minv (m+1, INF);
		vector<char> used (m+1, false);
		do {
			used[j0] = true;
			int i0 = p[j0],  delta = INF,  j1;
			for (int j=1; j<=m; ++j)
				if (!used[j]) {
					int cur = a[i0][j]-u[i0]-v[j];
					if (cur < minv[j])
						minv[j] = cur,  way[j] = j0;
					if (minv[j] < delta)
						delta = minv[j],  j1 = j;
				}
			for (int j=0; j<=m; ++j)
				if (used[j])
					u[p[j]] += delta,  v[j] -= delta;
				else
					minv[j] -= delta;
			j0 = j1;
		} while (p[j0] != 0);
		do {
			int j1 = way[j0];
			p[j0] = p[j1];
			j0 = j1;
		} while (j0);
	}
	vector<int> ans (n+1);
	for (int j=1; j<=m; ++j)
		ans[p[j]] = j;
	return ans;
}

/* Notes:
 1. Works only for non-negative edges(if not, add to the cost of each edge a constant)
 2. Finds minimum assignment(For maximum, multiply by -1)
 3. Time complexity is O(n^2*m)
 4. Arrays u and v store potential(Don't touch)
 5. Array p contains matching(Don't touch)
 6. Array ways stores something I don't know(Don't touch)
*/
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>hungarian</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
